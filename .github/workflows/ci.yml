name: Build and Validate Testdata

on:
  push:
    branches:
    - main
    tags:
    - v[0-9]+.[0-9]+.[0-9]+**
  pull_request:
    branches:
    - main

jobs:
  build-kds:
    runs-on: ubuntu-latest
    outputs:
      artifact-url: ${{ steps.upload-artifact.outputs.artifact-url }}
    steps:
    - name: Checkout Project
      uses: actions/checkout@v4

    #- name: Cache FHIR Packages
    #  id: fhir-cache
    #  uses: actions/cache@v4
    #  with:
    #    path: "~/.fhir"
    #    key: fhir-cache

    - name: Download FHIR cache
      uses: actions/checkout@v4
      with:
        repository: medizininformatik-initiative/fhir-package-store
        ref: cache-store
        path: .fhir

    - name: Link .fhir cache to ~/.fhir
      run: |
        mkdir -p ~/.fhir
        cp -r .fhir/* ~/.fhir/

    - name: Install jq, npm and yq
      run: |
        sudo apt-get update -qqq
        sudo apt-get install -qqqy npm jq > /dev/null
        wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        chmod +x /usr/local/bin/yq

    - name: Install sushi
      run: npm install -g fsh-sushi

    - name: Initial build
      id: initial-build
      run: |
        sushi build --log-level warn . || echo HAD_ERRORS='true' >> "$GITHUB_OUTPUT"
      working-directory: ./kds-testdata

    # - uses: actions/setup-dotnet@v4
    #   if: ${{ steps.initial-build.outputs.HAD_ERRORS == 'true' }}
    #   with:
    #     dotnet-version: '8.0.x'

    # - name: Install firely
    #   if: ${{ steps.initial-build.outputs.HAD_ERRORS == 'true' }}
    #   run: dotnet tool install -g firely.terminal

    # - name: Create FHIR package snapshots
    #   if: ${{ steps.initial-build.outputs.HAD_ERRORS == 'true' }}
    #   run: for dep in $(yq eval '.' sushi-config.yaml -o json | jq -r '.dependencies | keys[]'); do fhir inflate --package "$dep"; done
    #   working-directory: ./kds-testdata

    # - name: Final build
    #   if: ${{ steps.initial-build.outputs.HAD_ERRORS == 'true' }}
    #   run: sushi build --log-level warn  .
    #   working-directory: ./kds-testdata

    - name: Get KDS Testdata Version
      id: kds-version
      run: echo KDS_VERSION="$(yq eval '.' sushi-config.yaml -o json | jq -r '.version')" >> "$GITHUB_OUTPUT"
      working-directory: ./kds-testdata

    - name: Upload generated FHIR resources as artifact
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: "kds-testdata-${{ steps.kds-version.outputs.KDS_VERSION }}"
        path: ./kds-testdata/fsh-generated
        compression-level: 9
        if-no-files-found: error

    - name: Generate NDJSON from test data bundles
      id: ndjson
      run: |
        mkdir -p ./kds-testdata/ndjson
        output_file="./kds-testdata/ndjson/testdata-bundles.ndjson"
        > "$output_file"

        for file in ./kds-testdata/fsh-generated/resources/Bundle-mii-exa-test-data-bundle-pat*.json; do
          if [ -f "$file" ]; then
            jq -c '.' "$file" >> "$output_file"
          fi
        done
      shell: bash

    - name: Upload test data bundles NDJSON
      uses: actions/upload-artifact@v4
      with:
        name: testdata-bundles-ndjson
        path: ./kds-testdata/ndjson/testdata-bundles.ndjson
        compression-level: 9
        if-no-files-found: error

  JAVA_FHIR_VALIDATION:
    uses: medizininformatik-initiative/kerndatensatz-meta/.github/workflows/ci_java_validation.yml@master
    needs: build-kds
    with:
      ref: ${{ github.event.pull_request.head.ref }}
      PATH_TO_CONFORMANCE_RESOURCES: ./kds-testdata/fsh-generated/resources
      PATH_TO_EXAMPLES: ./kds-testdata/fsh-generated/resources
      JAVA_VALIDATION_ENABLED: true
      JAVA_VALIDATION_OPTIONS: ${{ vars.JAVA_VALIDATION_OPTIONS }}
      JAVA_VALIDATOR_VERSION: ${{ vars.JAVA_VALIDATOR_VERSION }}
      working-directory: ./kds-testdata
    secrets: inherit

  release:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs:
    - build-kds
    steps:
    - name: Checkout Project
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Zip each artifact
      run: |
        for a in *
        do
          zip -9qqr "$a.zip" "$a"
        done
      working-directory: artifacts

    - name: Add NDJSON file to release
      run: |
        cp artifacts/testdata-bundles-ndjson/testdata-bundles.ndjson .

    - name: Prepare Version
      id: prep-version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: "MII Testdata - ${{ steps.prep-version.outputs.version }}"
        draft: true
        generate_release_notes: true
        files: |
          artifacts/*.zip
          testdata-bundles.ndjson
        fail_on_unmatched_files: true
